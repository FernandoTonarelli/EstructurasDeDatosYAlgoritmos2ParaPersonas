
#include <iostream>
using namespace std;

template <typename T, typename Comparator = less<T>>
class AVLTree {
private:
    struct AVLNode {
        T value;
        AVLNode* left;
        AVLNode* right;
        int height;

        AVLNode(T v) : value(v), left(nullptr), right(nullptr), height(1) {}
    };

    AVLNode* root;
    Comparator compare;

    int getHeight(AVLNode* node) {
        return node ? node->height : 0;
    }

    int getBalanceFactor(AVLNode* node) {
        return node ? getHeight(node->left) - getHeight(node->right) : 0;
    }

    AVLNode* rotateRight(AVLNode* x) {
        AVLNode* y = x->left;
        AVLNode* yr = y->right;

        y->right = x;
        x->left = yr;

        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y;
    }

    AVLNode* rotateLeft(AVLNode* x) {
        AVLNode* y = x->right;
        AVLNode* yl = y->left;

        y->left = x;
        x->right = yl;

        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y;
    }

    AVLNode* insertRec(AVLNode* node, T& value) {
        if (!node) return new AVLNode(value);

        if (compare(value, node->value))
            node->left = insertRec(node->left, value);
        else if (compare(node->value, value))
            node->right = insertRec(node->right, value);
        else
            return node;

        node->height = 1 + max(getHeight(node->left), getHeight(node->right));

        int balanceFactor = getBalanceFactor(node);

        if (balanceFactor > 1) {
            if (compare(value, node->left->value))
            {
                cout << "RR Rotation ";
                return rotateRight(node);
            }
            cout << "LR Rotation ";
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }

        if (balanceFactor < -1) {
            if (compare(node->right->value, value))
            {
                cout << "LL Rotation ";
                return rotateLeft(node);
            }
            cout << "RL Rotation ";
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }

        return node;
    }

    void inOrderRec(AVLNode* node) {
        if (node)
        {
            inOrderRec(node->left);
            cout << node->value << " ";
            inOrderRec(node->right);
        }
    }

public:
    AVLTree() : root(nullptr) {}

    void insert(T& value) {
        root = insertRec(root, value);
    }

    // Solo de prueba
    void inOrder() {
        inOrderRec(root);
        cout << endl;
    }
};


int main() {
    AVLTree<int> treeRR;
    int valuesRR[] = { 3, 2, 1 };
    for (int val : valuesRR) {
        treeRR.insert(val);
    }
    treeRR.inOrder();

    AVLTree<int> treeLL;
    int valuesLL[] = { 1, 2, 3 };
    for (int val : valuesLL) {
        treeLL.insert(val);
    }
    treeLL.inOrder();

    AVLTree<int> treeRL;
    int valuesRL[] = { 1, 3, 2 };
    for (int val : valuesRL) {
        treeRL.insert(val);
    }
    treeRL.inOrder();

    AVLTree<int> treeLR;
    int valuesLR[] = { 3, 1, 2 };
    for (int val : valuesLR) {
        treeLR.insert(val);
    }
    treeLR.inOrder();

    return 0;
}
